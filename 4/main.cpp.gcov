        -:    0:Source:main.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:2
        -:    1:#include <iostream>
        -:    2:#include "Graph.hpp"
        -:    3:#include <random>
        -:    4:#include <unistd.h>
        -:    5:
        2:    6:Graph generateRandomGraph(int V, int E, int seed, bool directed = false) {
        -:    7:
        2:    8:    srand(seed);
        -:    9:
        2:   10:    Graph g(V, directed);
        -:   11:   
        2:   12:    int edgesAdded = 0;
     8919:   13:    while (edgesAdded < E) {
     8915:   14:        int u = rand() % V; // 0 to V-1
     8915:   15:        int v = rand() % V;
     8915:   16:        int w = rand() % 10 + 1; // Random weight between 1 and 10
        -:   17:        
     8915:   18:        if (u != v && !g.isEdgeConnected(u, v)) { // Avoid self-loops and duplicate edges
      873:   19:            g.addEdge(u, v, w);
      873:   20:            edgesAdded++;
        -:   21:        }
        -:   22:
        -:   23:    }
        2:   24:    return g;
    =====:   25:}
        -:   26:
        2:   27:int main(int argc, char *argv[]) {
        -:   28:    
        -:   29:    
        -:   30:    int V;
        -:   31:    int E;
        -:   32:    int seed;
        -:   33:    int opt;
        2:   34:    bool directed = false; // Default to not directed graph
        -:   35:
        9:   36:    while ((opt = getopt(argc, argv, "v:e:s:d")) != -1) {
        7:   37:        switch (opt) {
        2:   38:            case 'v':
        2:   39:                V = std::stoi(optarg);
        2:   40:                break;
        2:   41:            case 'e':
        2:   42:                E = std::stoi(optarg);
        2:   43:                break;
        2:   44:            case 's':
        2:   45:                seed = std::stoi(optarg);
        2:   46:                break;
        1:   47:            case 'd':
        1:   48:                directed = true;
        1:   49:                break;
    #####:   50:            case '?':
    #####:   51:                if (optopt == 'v' || optopt == 'e' || optopt == 's') {
    #####:   52:                    std::cerr << "Option -" << static_cast<char>(optopt) << " requires an argument." << std::endl;
        -:   53:                } else {
    #####:   54:                    std::cerr << "Unknown option `-" << static_cast<char>(optopt) << "`." << std::endl;
        -:   55:                }
    #####:   56:                return 1;
    #####:   57:            default:
    #####:   58:                abort(); // Stop the program on unexpected errors
        -:   59:        }
        -:   60:    }
        -:   61:
        2:   62:    if (V <= 0) {
    #####:   63:        std::cerr << "Error: Number of vertices must be positive." << std::endl;
    #####:   64:        return 1;
        -:   65:    }
        2:   66:    if (E < 0) {
    #####:   67:        std::cerr << "Error: Number of edges cannot be negative." << std::endl;
    #####:   68:        return 1;
        -:   69:    }
        2:   70:    if (directed) {
        1:   71:        if (E > V * (V - 1)) {
    #####:   72:            std::cerr << "Error: Too many edges for the number of vertices in a directed graph." << std::endl;
    #####:   73:            return 1;
        -:   74:        }
        -:   75:    } else {
        1:   76:        if (E > V * (V - 1) / 2) {
    #####:   77:            std::cerr << "Error: Too many edges for the number of vertices in an undirected graph." << std::endl;
    #####:   78:            return 1;
        -:   79:        }
        -:   80:    }
        -:   81:
        2:   82:    Graph g = generateRandomGraph(V, E, seed, directed);
        2:   83:    g.printGraph();
        -:   84:
        2:   85:    if (g.isEulerian()) {
        1:   86:        std::cout << "The graph is Eulerian." << std::endl;
        1:   87:        g.findEulerCircuit();
        -:   88:    } else {
        1:   89:        std::cout << "The graph is not Eulerian." << std::endl;
        -:   90:    }
        -:   91:
        2:   92:    return 0;
        -:   93:}
