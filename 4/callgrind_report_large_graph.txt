--------------------------------------------------------------------------------
Profile data file 'callgrind.out.179163' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 5997782302
Trigger: Program termination
Profiled target:  ./graph_project -v 499 -e 124251 -s 1 (PID 179163, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
35,036,074,918 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
8,008,073,260 (22.86%)  /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
7,263,160,001 (20.73%)  Graph.cpp:Graph::isEdgeConnected(int, int) const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
5,614,355,880 (16.02%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
4,784,851,116 (13.66%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
3,201,229,312 ( 9.14%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
  828,120,706 ( 2.36%)  ./libio/./libio/fileops.c:_IO_file_xsputn@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  525,954,007 ( 1.50%)  /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
  461,336,909 ( 1.32%)  ./libio/./libio/iofwrite.c:fwrite [/usr/lib/x86_64-linux-gnu/libc.so.6]
  369,770,640 ( 1.06%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
  335,186,716 ( 0.96%)  /usr/include/c++/13/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>, std::random_access_iterator_tag) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
  307,018,874 ( 0.88%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  271,130,646 ( 0.77%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  250,489,808 ( 0.71%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
  245,994,923 ( 0.70%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  193,543,237 ( 0.55%)  ???:std::ostream& std::ostream::_M_insert<long>(long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  177,278,392 ( 0.51%)  ???:0x0000000000146900 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
  141,216,339 ( 0.40%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__mempcpy_sse2_unaligned [/usr/lib/x86_64-linux-gnu/libc.so.6]
  121,404,450 ( 0.35%)  ./libio/./libio/libioP.h:fwrite
  106,410,871 ( 0.30%)  ./string/../sysdeps/x86_64/multiarch/strlen-sse2.S:__strlen_sse2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   95,133,560 ( 0.27%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   86,335,077 ( 0.25%)  ./stdlib/./stdlib/random_r.c:random_r [/usr/lib/x86_64-linux-gnu/libc.so.6]
   84,241,567 ( 0.24%)  main.cpp:generateRandomGraph(int, int, int) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   83,426,603 ( 0.24%)  ./libio/./libio/fileops.c:_IO_do_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   73,412,944 ( 0.21%)  ???:0x0000000000142070 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   71,113,255 ( 0.20%)  ./libio/./libio/fileops.c:_IO_file_overflow@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   70,999,896 ( 0.20%)  ./stdlib/./stdlib/random.c:random [/usr/lib/x86_64-linux-gnu/libc.so.6]
   67,934,988 ( 0.19%)  ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   63,303,190 ( 0.18%)  ???:std::ostream::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   58,707,606 ( 0.17%)  ./libio/./libio/fileops.c:_IO_file_write@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   53,416,836 ( 0.15%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   48,561,780 ( 0.14%)  ???:__gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   46,319,610 ( 0.13%)  ./libio/./libio/iofflush.c:fflush [/usr/lib/x86_64-linux-gnu/libc.so.6]
   43,271,520 ( 0.12%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   41,107,944 ( 0.12%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   36,706,472 ( 0.10%)  ???:std::ostream::operator<<(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   35,511,471 ( 0.10%)  ./libio/./libio/putc.c:putc [/usr/lib/x86_64-linux-gnu/libc.so.6]
   32,423,748 ( 0.09%)  ./libio/./libio/fileops.c:_IO_file_sync@@GLIBC_2.2.5 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   32,423,517 ( 0.09%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   25,021,035 ( 0.07%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   23,159,805 ( 0.07%)  ./libio/./libio/libioP.h:fflush
   22,954,092 ( 0.07%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   22,363,179 ( 0.06%)  ???:0x00000000048f5360 [???]
   20,246,448 ( 0.06%)  /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   20,071,701 ( 0.06%)  ./libio/./libio/genops.c:__overflow [/usr/lib/x86_64-linux-gnu/libc.so.6]
   20,022,660 ( 0.06%)  ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   19,259,065 ( 0.05%)  Graph.cpp:Graph::findEulerCircuit() [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   18,637,665 ( 0.05%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   18,521,712 ( 0.05%)  ./stdlib/./stdlib/rand.c:rand [/usr/lib/x86_64-linux-gnu/libc.so.6]
   16,467,000 ( 0.05%)  /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator*() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   16,187,265 ( 0.05%)  ???:0x00000000048f4d00 [???]
   16,186,216 ( 0.05%)  ???:0x0000000004b24430 [???]
   14,970,060 ( 0.04%)  /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   14,890,076 ( 0.04%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   14,449,956 ( 0.04%)  Graph.cpp:DFS(int, std::vector<bool, std::allocator<bool> >&, Graph const&)'2 [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   13,766,560 ( 0.04%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   12,974,000 ( 0.04%)  /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   12,922,182 ( 0.04%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::empty() const [/home/yaelgildorani/Op_systems/Ex4/4/graph_project]
   12,359,496 ( 0.04%)  ./io/../sysdeps/unix/sysv/linux/write.c:write [/usr/lib/x86_64-linux-gnu/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_bvector.h
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        .           
        .             struct _Bit_reference
        .             {
        .               _Bit_type * _M_p;
        .               _Bit_type _M_mask;
        .           
        .               _GLIBCXX20_CONSTEXPR
2,994,000 ( 0.01%)      _Bit_reference(_Bit_type * __x, _Bit_type __y)
4,491,000 ( 0.01%)      : _M_p(__x), _M_mask(__y) { }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }
        .           
        .           #if __cplusplus >= 201103L
        .               _Bit_reference(const _Bit_reference&) = default;
        .           #endif
        .           
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1,992,008 ( 0.01%)      operator bool() const _GLIBCXX_NOEXCEPT
4,980,020 ( 0.01%)      { return !!(*_M_p & _M_mask); }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               _Bit_reference&
    5,988 ( 0.00%)      operator=(bool __x) _GLIBCXX_NOEXCEPT
        .               {
    1,996 ( 0.00%)        if (__x)
    9,980 ( 0.00%)  	*_M_p |= _M_mask;
        .                 else
        .           	*_M_p &= ~_M_mask;
      998 ( 0.00%)        return *this;
    1,996 ( 0.00%)      }
        .           
        .           #if __cplusplus > 202002L
        .               constexpr const _Bit_reference&
        .               operator=(bool __x) const noexcept
        .               {
        .                 if (__x)
        .           	*_M_p |= _M_mask;
        .                 else
-- line 119 ----------------------------------------
-- line 181 ----------------------------------------
        .               _Bit_type * _M_p;
        .               unsigned int _M_offset;
        .           
        .               _GLIBCXX20_CONSTEXPR _GLIBCXX_ALWAYS_INLINE
        .               void
        .               _M_assume_normalized() const
        .               {
        .           #if __has_attribute(__assume__) && !defined(__clang__)
2,994,006 ( 0.01%)        unsigned int __ofst = _M_offset;
  998,002 ( 0.00%)        __attribute__ ((__assume__ (__ofst < unsigned(_S_word_bit))));
        .           #endif
  998,002 ( 0.00%)      }
        .           
        .               _GLIBCXX20_CONSTEXPR
2,994,060 ( 0.01%)      _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
4,491,090 ( 0.01%)      : _M_p(__x), _M_offset(__y) { }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               void
        .               _M_bump_up()
        .               {
        .                 _M_assume_normalized();
        .                 if (_M_offset++ == int(_S_word_bit) - 1)
        .           	{
-- line 204 ----------------------------------------
-- line 216 ----------------------------------------
        .           	{
        .           	  _M_offset = int(_S_word_bit) - 1;
        .           	  --_M_p;
        .           	}
        .               }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               void
3,493,014 ( 0.01%)      _M_incr(ptrdiff_t __i)
        .               {
        .                 _M_assume_normalized();
2,994,012 ( 0.01%)        difference_type __n = __i + _M_offset;
5,489,022 ( 0.02%)        _M_p += __n / int(_S_word_bit);
3,992,016 ( 0.01%)        __n = __n % int(_S_word_bit);
  998,004 ( 0.00%)        if (__n < 0)
        .           	{
        .           	  __n += int(_S_word_bit);
        .           	  --_M_p;
        .           	}
1,996,008 ( 0.01%)        _M_offset = static_cast<unsigned int>(__n);
1,497,006 ( 0.00%)      }
        .           
        .               _GLIBCXX_NODISCARD
        .               friend _GLIBCXX20_CONSTEXPR bool
        .               operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
        .               {
        .                 __x._M_assume_normalized();
        .                 __y._M_assume_normalized();
        .                 return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset;
-- line 244 ----------------------------------------
-- line 305 ----------------------------------------
        .           #if __cplusplus > 201703L
        .               typedef void	    pointer;
        .           #else
        .               typedef _Bit_reference* pointer;
        .           #endif
        .               typedef _Bit_iterator   iterator;
        .           
        .               _GLIBCXX20_CONSTEXPR
      104 ( 0.00%)      _Bit_iterator() : _Bit_iterator_base(0, 0) { }
      120 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (8x)
        .           
        .               _GLIBCXX20_CONSTEXPR
3,493,014 ( 0.01%)      _Bit_iterator(_Bit_type * __x, unsigned int __y)
4,491,018 ( 0.01%)      : _Bit_iterator_base(__x, __y) { }
7,485,030 ( 0.02%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_Bit_iterator_base(unsigned long*, unsigned int) (499,002x)
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               iterator
        .               _M_const_cast() const
        .               { return *this; }
        .           
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               reference
3,992,000 ( 0.01%)      operator*() const
        .               {
  998,000 ( 0.00%)        _M_assume_normalized();
6,487,000 ( 0.02%)        return reference(_M_p, 1UL << _M_offset);
7,485,000 ( 0.02%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::_Bit_reference(unsigned long*, unsigned long) (499,000x)
2,495,000 ( 0.01%)      }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               iterator&
        .               operator++()
        .               {
        .                 _M_bump_up();
        .                 return *this;
        .               }
-- line 338 ----------------------------------------
-- line 360 ----------------------------------------
        .               {
        .                 iterator __tmp = *this;
        .                 _M_bump_down();
        .                 return __tmp;
        .               }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               iterator&
2,994,012 ( 0.01%)      operator+=(difference_type __i)
        .               {
2,495,010 ( 0.01%)        _M_incr(__i);
22,954,092 ( 0.07%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator_base::_M_incr(long) (499,002x)
  499,002 ( 0.00%)        return *this;
  998,004 ( 0.00%)      }
        .           
        .               _GLIBCXX20_CONSTEXPR
        .               iterator&
        .               operator-=(difference_type __i)
        .               {
        .                 *this += -__i;
        .                 return *this;
        .               }
        .           
        .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .               reference
4,491,000 ( 0.01%)      operator[](difference_type __i) const
7,485,000 ( 0.02%)      { return *(*this + __i); }
44,910,000 ( 0.13%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (499,000x)
23,952,000 ( 0.07%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator*() const (499,000x)
        .           
        .               _GLIBCXX_NODISCARD
        .               friend _GLIBCXX20_CONSTEXPR iterator
4,491,018 ( 0.01%)      operator+(const iterator& __x, difference_type __n)
        .               {
2,495,010 ( 0.01%)        iterator __tmp = __x;
2,495,010 ( 0.01%)        __tmp += __n;
29,940,120 ( 0.09%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator+=(long) (499,002x)
2,994,012 ( 0.01%)        return __tmp;
2,495,010 ( 0.01%)      }
        .           
        .               _GLIBCXX_NODISCARD
        .               friend _GLIBCXX20_CONSTEXPR iterator
        .               operator+(difference_type __n, const iterator& __x)
        .               { return __x + __n; }
        .           
        .               _GLIBCXX_NODISCARD
        .               friend _GLIBCXX20_CONSTEXPR iterator
-- line 402 ----------------------------------------
-- line 543 ----------------------------------------
        .           	  _GLIBCXX20_CONSTEXPR
        .           	  void operator=(_Bit_iterator __it) { _M_p = __it._M_p; }
        .           	} _M_start;
        .           #endif
        .           	_Bit_iterator	_M_finish;
        .           	_Bit_pointer	_M_end_of_storage;
        .           
        .           	_GLIBCXX20_CONSTEXPR
       20 ( 0.00%)  	_Bvector_impl_data() _GLIBCXX_NOEXCEPT
       36 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
      224 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator() (8x)
       12 ( 0.00%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	_Bvector_impl_data(const _Bvector_impl_data&) = default;
        .           
        .           	_Bvector_impl_data&
        .           	operator=(const _Bvector_impl_data&) = default;
        .           
        .           	_GLIBCXX20_CONSTEXPR
-- line 561 ----------------------------------------
-- line 569 ----------------------------------------
        .           	{
        .           	  *this = __x;
        .           	  __x._M_reset();
        .           	}
        .           #endif
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	void
       18 ( 0.00%)  	_M_reset() _GLIBCXX_NOEXCEPT
       44 ( 0.00%)  	{ *this = _Bvector_impl_data(); }
      146 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (2x)
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	void
        .           	_M_swap_data(_Bvector_impl_data& __x) _GLIBCXX_NOEXCEPT
        .           	{
        .           	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
        .           	  // information used by TBAA.
        .           	  std::swap(*this, __x);
        .           	}
        .                 };
        .           
       20 ( 0.00%)        struct _Bvector_impl
        .           	: public _Bit_alloc_type, public _Bvector_impl_data
        .                 {
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Bvector_impl() _GLIBCXX_NOEXCEPT_IF(
        .           	  is_nothrow_default_constructible<_Bit_alloc_type>::value)
        .           #if __cpp_concepts && __cpp_lib_type_trait_variable_templates
        .           	requires is_default_constructible_v<_Bit_alloc_type>
        .           #endif
        .           	: _Bit_alloc_type()
        .           	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
       28 ( 0.00%)  	_Bvector_impl(const _Bit_alloc_type& __a) _GLIBCXX_NOEXCEPT
        6 ( 0.00%)  	: _Bit_alloc_type(__a)
      146 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_Bvector_impl_data() (2x)
        6 ( 0.00%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	// Not defaulted, to enforce noexcept(true) even when
        .           	// !is_nothrow_move_constructible<_Bit_alloc_type>.
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Bvector_impl(_Bvector_impl&& __x) noexcept
        .           	: _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
        .           	{ }
-- line 613 ----------------------------------------
-- line 615 ----------------------------------------
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
        .           	: _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
        .           	{ }
        .           #endif
        .           
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Bit_type*
       20 ( 0.00%)  	_M_end_addr() const _GLIBCXX_NOEXCEPT
        .           	{
       16 ( 0.00%)  	  if (this->_M_end_of_storage)
       28 ( 0.00%)  	    return std::__addressof(this->_M_end_of_storage[-1]) + 1;
       28 ( 0.00%)  => /usr/include/c++/13/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (4x)
        .           	  return 0;
        8 ( 0.00%)  	}
        .                 };
        .           
        .               public:
        .                 typedef _Alloc allocator_type;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Bit_alloc_type&
        .                 _M_get_Bit_allocator() _GLIBCXX_NOEXCEPT
-- line 636 ----------------------------------------
-- line 648 ----------------------------------------
        .           
        .           #if __cplusplus >= 201103L
        .                 _Bvector_base() = default;
        .           #else
        .                 _Bvector_base() { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       18 ( 0.00%)        _Bvector_base(const allocator_type& __a)
       30 ( 0.00%)        : _M_impl(__a) { }
      190 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_Bvector_impl(std::allocator<unsigned long> const&) (2x)
        .           
        .           #if __cplusplus >= 201103L
        .                 _Bvector_base(_Bvector_base&&) = default;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
        .                 : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
        .                 { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       10 ( 0.00%)        ~_Bvector_base()
       18 ( 0.00%)        { this->_M_deallocate(); }
      564 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_deallocate() (2x)
       42 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::~_Bvector_impl() (2x)
        .           
        .               protected:
        .                 _Bvector_impl _M_impl;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Bit_pointer
       12 ( 0.00%)        _M_allocate(size_t __n)
        .                 {
       14 ( 0.00%)  	_Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
       18 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (2x)
        .           #if __cpp_lib_is_constant_evaluated && __cpp_constexpr_dynamic_alloc
        .           	if (std::is_constant_evaluated())
        .           	  {
        .           	    __n = _S_nword(__n);
        .           	    for (size_t __i = 0; __i < __n; ++__i)
        .           	      std::construct_at(std::to_address(__p) + __i);
        .           	  }
        .           #endif
        2 ( 0.00%)  	return __p;
        4 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       10 ( 0.00%)        _M_deallocate()
        .                 {
        8 ( 0.00%)  	if (_M_impl._M_start._M_p)
        .           	  {
       20 ( 0.00%)  	    const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
       50 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (2x)
       12 ( 0.00%)  	    _Bit_alloc_traits::deallocate(_M_impl,
       10 ( 0.00%)  					  _M_impl._M_end_of_storage - __n,
        .           					  __n);
        6 ( 0.00%)  	    _M_impl._M_reset();
      208 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl_data::_M_reset() (2x)
        .           	  }
        6 ( 0.00%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 _M_move_data(_Bvector_base&& __x) noexcept
        .                 { _M_impl._M_move_data(std::move(__x._M_impl)); }
        .           #endif
        .           
        .                 _GLIBCXX_CONSTEXPR
        .                 static size_t
       16 ( 0.00%)        _S_nword(size_t __n)
       20 ( 0.00%)        { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
        .               };
        .           
        .             /**
        .              *  @brief  A specialization of vector for booleans which offers fixed time
        .              *  access to individual elements in any order.
        .              *
        .              *  @ingroup sequences
        .              *  @headerfile vector
-- line 723 ----------------------------------------
-- line 787 ----------------------------------------
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 explicit
        .                 vector(size_type __n, const allocator_type& __a = allocator_type())
        .                 : vector(__n, false, __a)
        .                 { }
        .           
        .                 _GLIBCXX20_CONSTEXPR
       18 ( 0.00%)        vector(size_type __n, const bool& __value,
        .           	     const allocator_type& __a = allocator_type())
        .           #else
        .                 explicit
        .                 vector(size_type __n, const bool& __value = bool(),
        .           	     const allocator_type& __a = allocator_type())
        .           #endif
       10 ( 0.00%)        : _Base(__a)
      264 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_base(std::allocator<bool> const&) (2x)
        .                 {
       10 ( 0.00%)  	_M_initialize(__n);
      630 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize(unsigned long) (2x)
       14 ( 0.00%)  	_M_initialize_value(__value);
      188 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::_M_initialize_value(bool) (2x)
        8 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 vector(const vector& __x)
        .                 : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
        .                 {
        .           	const_iterator __xbegin = __x.begin(), __xend = __x.end();
        .           	_M_initialize(__x.size());
        .           	_M_copy_aligned(__xbegin, __xend, begin());
-- line 814 ----------------------------------------
-- line 882 ----------------------------------------
        .           	{
        .           	  // Check whether it's an integral type. If so, it's not an iterator.
        .           	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
        .           	  _M_initialize_dispatch(__first, __last, _Integral());
        .           	}
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       22 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT { }
      634 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::~_Bvector_base() (2x)
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 vector&
        .                 operator=(const vector& __x)
        .                 {
        .           	if (&__x == this)
        .           	  return *this;
        .           #if __cplusplus >= 201103L
-- line 898 ----------------------------------------
-- line 987 ----------------------------------------
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 assign(initializer_list<bool> __l)
        .                 { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
        .           #endif
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
3,992,000 ( 0.01%)        begin() _GLIBCXX_NOEXCEPT
8,982,000 ( 0.03%)        { return iterator(this->_M_impl._M_start._M_p, 0); }
15,469,000 ( 0.04%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (499,000x)
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_iterator
        .                 begin() const _GLIBCXX_NOEXCEPT
        .                 { return const_iterator(this->_M_impl._M_start._M_p, 0); }
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
-- line 1004 ----------------------------------------
-- line 1078 ----------------------------------------
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 bool
        .                 empty() const _GLIBCXX_NOEXCEPT
        .                 { return begin() == end(); }
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reference
4,491,000 ( 0.01%)        operator[](size_type __n)
7,485,000 ( 0.02%)        { return begin()[__n]; }
80,838,000 ( 0.23%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::operator[](long) const (499,000x)
28,443,000 ( 0.08%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::begin() (499,000x)
        .           
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_reference
        .                 operator[](size_type __n) const
        .                 { return begin()[__n]; }
        .           
        .               protected:
        .                 _GLIBCXX20_CONSTEXPR
-- line 1095 ----------------------------------------
-- line 1341 ----------------------------------------
        .                 {
        .           	_Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
        .           	return std::copy(const_iterator(__last._M_p, 0), __last,
        .           			 iterator(__q, 0));
        .                 }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       18 ( 0.00%)        _M_initialize(size_type __n)
        .                 {
        4 ( 0.00%)  	if (__n)
        .           	  {
       12 ( 0.00%)  	    _Bit_pointer __q = this->_M_allocate(__n);
      242 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_M_allocate(unsigned long) (2x)
       16 ( 0.00%)  	    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
       18 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_S_nword(unsigned long) (2x)
       18 ( 0.00%)  	    iterator __start = iterator(std::__addressof(*__q), 0);
       62 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_iterator::_Bit_iterator(unsigned long*, unsigned int) (2x)
       14 ( 0.00%)  => /usr/include/c++/13/bits/move.h:unsigned long* std::__addressof<unsigned long>(unsigned long&) (2x)
       10 ( 0.00%)  	    this->_M_impl._M_start = __start;
       24 ( 0.00%)  	    this->_M_impl._M_finish = __start + difference_type(__n);
      180 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::operator+(std::_Bit_iterator const&, long) (2x)
        .           	  }
       12 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       16 ( 0.00%)        _M_initialize_value(bool __x) _GLIBCXX_NOEXCEPT
        .                 {
       10 ( 0.00%)  	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
       24 ( 0.00%)  	  __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
       80 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::__fill_bvector_n(unsigned long*, unsigned long, bool) (2x)
       50 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bvector_base<std::allocator<bool> >::_Bvector_impl::_M_end_addr() const (2x)
        8 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 _M_reallocate(size_type __n);
        .           
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 bool
-- line 1375 ----------------------------------------
-- line 1580 ----------------------------------------
        .                 *__v &= ~__mask;
        .             }
        .           
        .             // Fill N full words, as if using memset, but usable in constant expressions.
        .             __attribute__((__nonnull__))
        .             _GLIBCXX20_CONSTEXPR
        .             inline void
        .             __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) _GLIBCXX_NOEXCEPT
       16 ( 0.00%)    {
        .           #if __cpp_lib_is_constant_evaluated
        .               if (std::is_constant_evaluated())
        .               {
        .                 for (size_t __i = 0; __i < __n; ++__i)
        .           	__p[__i] = __x ? ~0ul : 0ul;
        .                 return;
        .               }
        .           #endif
       18 ( 0.00%)      __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
       40 ( 0.00%)  => ???:0x000000000010a330 (2x)
        6 ( 0.00%)    }
        .           
        .           
        .             _GLIBCXX20_CONSTEXPR
        .             inline void
        .             __fill_a1(_GLIBCXX_STD_C::_Bit_iterator __first,
        .           	    _GLIBCXX_STD_C::_Bit_iterator __last, const bool& __x)
        .             {
        .               if (__first._M_p != __last._M_p)
-- line 1606 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir                  

-- line 225 ----------------------------------------
         .              *
         .              *  This is the simple classic generic implementation.  It will work on
         .              *  temporary expressions, since they are only evaluated once, unlike a
         .              *  preprocessor macro.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX14_CONSTEXPR
         .               inline const _Tp&
    50,265 ( 0.00%)      min(const _Tp& __a, const _Tp& __b)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         .                 //return __b < __a ? __b : __a;
    60,318 ( 0.00%)        if (__b < __a)
         .           	return __b;
    10,053 ( 0.00%)        return __a;
    20,106 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief This does what you think it does.
         .              *  @ingroup sorting_algorithms
         .              *  @param  __a  A thing of arbitrary type.
         .              *  @param  __b  Another thing of arbitrary type.
         .              *  @return   The greater of the parameters.
         .              *
         .              *  This is the simple classic generic implementation.  It will work on
         .              *  temporary expressions, since they are only evaluated once, unlike a
         .              *  preprocessor macro.
         .             */
         .             template<typename _Tp>
         .               _GLIBCXX14_CONSTEXPR
         .               inline const _Tp&
    25,130 ( 0.00%)      max(const _Tp& __a, const _Tp& __b)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
         .                 //return  __a < __b ? __b : __a;
    30,156 ( 0.00%)        if (__a < __b)
     1,002 ( 0.00%)  	return __b;
     4,525 ( 0.00%)        return __a;
    10,052 ( 0.00%)      }
         .           
         .             /**
         .              *  @brief This does what you think it does.
         .              *  @ingroup sorting_algorithms
         .              *  @param  __a  A thing of arbitrary type.
         .              *  @param  __b  Another thing of arbitrary type.
         .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
         .              *  @return   The lesser of the parameters.
-- line 273 ----------------------------------------
-- line 308 ----------------------------------------
         .                 return __a;
         .               }
         .           
         .             // Fallback implementation of the function in bits/stl_iterator.h used to
         .             // remove the __normal_iterator wrapper. See copy, fill, ...
         .             template<typename _Iterator>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _Iterator
   122,620 ( 0.00%)      __niter_base(_Iterator __it)
         .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    91,965 ( 0.00%)      { return __it; }
         .           
         .             template<typename _Ite, typename _Seq>
         .               _Ite
         .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
         .           		 std::random_access_iterator_tag>&);
         .           
         .             // Reverse the __niter_base transformation to get a
         .             // __normal_iterator back again (this assumes that __normal_iterator
         .             // is only used to wrap random access iterators, like pointers).
         .             template<typename _From, typename _To>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _From
   372,270 ( 0.00%)      __niter_wrap(_From __from, _To __res)
   868,630 ( 0.00%)      { return __from + (__res - std::__niter_base(__from)); }
 2,357,710 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (62,045x)
 1,116,810 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:int* std::__niter_base<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (62,045x)
         .           
         .             // No need to wrap, iterator already has the right type.
         .             template<typename _Iterator>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _Iterator
     2,495 ( 0.00%)      __niter_wrap(const _Iterator&, _Iterator __res)
     1,497 ( 0.00%)      { return __res; }
         .           
         .             // All of these auxiliary structs serve two purposes.  (1) Replace
         .             // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
         .             // because the input and output ranges are permitted to overlap.)
         .             // (2) If we're using random access iterators, then write the loop as
         .             // a for loop with an explicit count.
         .           
         .             template<bool _IsMove, bool _IsSimple, typename _Category>
-- line 347 ----------------------------------------
-- line 414 ----------------------------------------
         .           	      ++__first;
         .           	      ++__result;
         .           	    }
         .           	  return __result;
         .           	}
         .           
         .                 template<typename _Tp, typename _Up>
         .           	static void
   187,494 ( 0.00%)  	__assign_one(_Tp* __to, _Up* __from)
   281,241 ( 0.00%)  	{ *__to = std::move(*__from); }
   218,743 ( 0.00%)  => /usr/include/c++/13/bits/move.h:std::remove_reference<int&>::type&& std::move<int&>(int&) (31,249x)
         .               };
         .           #endif
         .           
         .             template<bool _IsMove>
         .               struct __copy_move<_IsMove, true, random_access_iterator_tag>
         .               {
         .                 template<typename _Tp, typename _Up>
         .           	_GLIBCXX20_CONSTEXPR
         .           	static _Up*
   437,808 ( 0.00%)  	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
         .           	{
   250,176 ( 0.00%)  	  const ptrdiff_t _Num = __last - __first;
   312,720 ( 0.00%)  	  if (__builtin_expect(_Num > 1, true))
   250,360 ( 0.00%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   402,652 ( 0.00%)  => ???:0x000000000010a4b0 (30,796x)
    62,498 ( 0.00%)  	  else if (_Num == 1)
         .           	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
   156,245 ( 0.00%)  	      __assign_one(__result, __first);
   687,478 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:void std::__copy_move<true, false, std::random_access_iterator_tag>::__assign_one<int, int>(int*, int*) (31,249x)
   250,176 ( 0.00%)  	  return __result + _Num;
   125,088 ( 0.00%)  	}
         .               };
         .           
         .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
         .           
         .             template<typename _Tp, typename _Ref, typename _Ptr>
         .               struct _Deque_iterator;
         .           
         .             struct _Bit_iterator;
-- line 450 ----------------------------------------
-- line 489 ----------------------------------------
         .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
         .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
         .           	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
         .           #endif // HOSTED
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
   437,808 ( 0.00%)      __copy_move_a2(_II __first, _II __last, _OI __result)
         .               {
         .                 typedef typename iterator_traits<_II>::iterator_category _Category;
         .           #ifdef __cpp_lib_is_constant_evaluated
         .                 if (std::is_constant_evaluated())
         .           	return std::__copy_move<_IsMove, false, _Category>::
         .           	  __copy_m(__first, __last, __result);
         .           #endif
         .                 return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
   375,264 ( 0.00%)  			      _Category>::__copy_m(__first, __last, __result);
   214,504 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<int const, int>(int const*, int const*, int*) (499x)
   125,088 ( 0.00%)      }
         .           
         .             template<bool _IsMove,
         .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
         .               _OI
         .               __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
         .           		   _OI);
         .           
-- line 515 ----------------------------------------
-- line 524 ----------------------------------------
         .               typename __gnu_cxx::__enable_if<
         .                 __is_random_access_iter<_II>::__value,
         .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
         .               __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
   437,808 ( 0.00%)      __copy_move_a1(_II __first, _II __last, _OI __result)
   500,352 ( 0.00%)      { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 3,850,906 ( 0.01%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__copy_move_a2<true, int*, int*>(int*, int*, int*) (62,045x)
         .           
         .             template<bool _IsMove, typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
   562,896 ( 0.00%)      __copy_move_a(_II __first, _II __last, _OI __result)
         .               {
 1,250,880 ( 0.00%)        return std::__niter_wrap(__result,
   229,474 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__copy_move_a1<false, int const*, int*>(int const*, int const*, int*) (499x)
    17,964 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:int const* std::__niter_base<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) (998x)
     3,992 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__niter_wrap<int*>(int* const&, int*) (499x)
     3,493 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__niter_base<int*>(int*) (499x)
         .           		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
         .           					     std::__niter_base(__last),
         .           					     std::__niter_base(__result)));
   312,720 ( 0.00%)      }
         .           
         .             template<bool _IsMove,
         .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
         .               _OI
         .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
         .           		  _OI);
         .           
-- line 552 ----------------------------------------
-- line 616 ----------------------------------------
         .              *  [first,last); the copy_backward function should be used instead.
         .              *
         .              *  Note that the end of the output range is permitted to be contained
         .              *  within [first,last).
         .             */
         .             template<typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
     3,992 ( 0.00%)      copy(_II __first, _II __last, _OI __result)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
         .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
         .           	    typename iterator_traits<_II>::reference>)
         .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
         .           
         .                 return std::__copy_move_a<__is_move_iterator<_II>::__value>
     6,487 ( 0.00%)  	     (std::__miter_base(__first), std::__miter_base(__last), __result);
   271,889 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:int* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*>(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, int*) (499x)
     6,986 ( 0.00%)  => /usr/include/c++/13/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) (998x)
     1,497 ( 0.00%)      }
         .           
         .           #if __cplusplus >= 201103L
         .             /**
         .              *  @brief Moves the range [first,last) into result.
         .              *  @ingroup mutating_algorithms
         .              *  @param  __first  An input iterator.
         .              *  @param  __last   An input iterator.
         .              *  @param  __result An output iterator.
-- line 642 ----------------------------------------
-- line 649 ----------------------------------------
         .              *  [first,last); the move_backward function should be used instead.
         .              *
         .              *  Note that the end of the output range is permitted to be contained
         .              *  within [first,last).
         .             */
         .             template<typename _II, typename _OI>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _OI
   496,360 ( 0.00%)      move(_II __first, _II __last, _OI __result)
         .               {
         .                 // concept requirements
         .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
         .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
         .           	    typename iterator_traits<_II>::value_type&&>)
         .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
         .           
   806,585 ( 0.00%)        return std::__copy_move_a<true>(std::__miter_base(__first),
14,956,961 ( 0.04%)  => /usr/include/c++/13/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__copy_move_a<true, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (62,045x)
   868,630 ( 0.00%)  => /usr/include/c++/13/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__miter_base<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (124,090x)
         .           				      std::__miter_base(__last), __result);
   186,135 ( 0.00%)      }
         .           
         .           #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
         .           #else
         .           #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
         .           #endif
         .           
         .             template<bool _IsMove, bool _IsSimple, typename _Category>
         .               struct __copy_move_backward
-- line 675 ----------------------------------------
-- line 2056 ----------------------------------------
         .           	++__first;
         .                 return __first;
         .               }
         .           
         .             /// This is an overload used by find algos for the RAI case.
         .             template<typename _RandomAccessIterator, typename _Predicate>
         .               _GLIBCXX20_CONSTEXPR
         .               _RandomAccessIterator
   869,757 ( 0.00%)      __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
         .           	      _Predicate __pred, random_access_iterator_tag)
         .               {
         .                 typename iterator_traits<_RandomAccessIterator>::difference_type
   869,757 ( 0.00%)  	__trip_count = (__last - __first) >> 2;
 4,473,036 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (124,251x)
         .           
23,328,354 ( 0.07%)        for (; __trip_count > 0; --__trip_count)
         .           	{
54,103,987 ( 0.15%)  	  if (__pred(__first))
193,228,525 ( 0.55%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (7,729,141x)
    10,220 ( 0.00%)  	    return __first;
23,172,093 ( 0.07%)  	  ++__first;
92,688,372 ( 0.26%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (7,724,031x)
         .           
54,068,217 ( 0.15%)  	  if (__pred(__first))
193,100,775 ( 0.55%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (7,724,031x)
    20,420 ( 0.00%)  	    return __first;
23,141,463 ( 0.07%)  	  ++__first;
92,565,852 ( 0.26%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (7,713,821x)
         .           
53,996,747 ( 0.15%)  	  if (__pred(__first))
192,845,525 ( 0.55%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (7,713,821x)
    41,122 ( 0.00%)  	    return __first;
23,079,780 ( 0.07%)  	  ++__first;
92,319,120 ( 0.26%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (7,693,260x)
         .           
53,852,820 ( 0.15%)  	  if (__pred(__first))
192,331,500 ( 0.55%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (7,693,260x)
    82,786 ( 0.00%)  	    return __first;
22,955,601 ( 0.07%)  	  ++__first;
91,822,404 ( 0.26%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (7,651,867x)
         .           	}
         .           
   609,887 ( 0.00%)        switch (__last - __first)
 1,691,172 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (46,977x)
         .           	{
         .           	case 3:
       812 ( 0.00%)  	  if (__pred(__first))
     2,900 ( 0.00%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (116x)
        22 ( 0.00%)  	    return __first;
       315 ( 0.00%)  	  ++__first;
     1,260 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (105x)
         .           	  // FALLTHRU
         .           	case 2:
   328,349 ( 0.00%)  	  if (__pred(__first))
 1,172,675 ( 0.00%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (46,907x)
    31,542 ( 0.00%)  	    return __first;
    93,408 ( 0.00%)  	  ++__first;
   373,632 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator++() (31,136x)
         .           	  // FALLTHRU
         .           	case 1:
   218,365 ( 0.00%)  	  if (__pred(__first))
   779,875 ( 0.00%)  => /usr/include/c++/13/bits/predefined_ops.h:bool __gnu_cxx::__ops::_Iter_equals_val<int const>::operator()<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (31,195x)
    62,390 ( 0.00%)  	    return __first;
         .           	  ++__first;
         .           	  // FALLTHRU
         .           	case 0:
         .           	default:
         .           	  return __last;
         .           	}
   248,502 ( 0.00%)      }
         .           
         .             template<typename _Iterator, typename _Predicate>
         .               _GLIBCXX20_CONSTEXPR
         .               inline _Iterator
   869,757 ( 0.00%)      __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
         .               {
   745,506 ( 0.00%)        return __find_if(__first, __last, __pred,
1,484,583,339 ( 4.24%)  => /usr/include/c++/13/bits/stl_algobase.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::__find_if<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const> >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__ops::_Iter_equals_val<int const>, std::random_access_iterator_tag) (124,251x)
         .           		       std::__iterator_category(__first));
   248,502 ( 0.00%)      }
         .           
         .             template<typename _InputIterator, typename _Predicate>
         .               _GLIBCXX20_CONSTEXPR
         .               typename iterator_traits<_InputIterator>::difference_type
         .               __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
         .               {
         .                 typename iterator_traits<_InputIterator>::difference_type __n = 0;
         .                 for (; __first != __last; ++__first)
-- line 2127 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: Graph.cpp
--------------------------------------------------------------------------------
Ir                     

-- line 3 ----------------------------------------
            .           #include <algorithm> // For std::find
            .           #include "Graph.hpp"
            .           
            .           class Graph; 
            .           void DFS(int start_node, std::vector<bool>& visited, const Graph& graph);
            .           
            .           
            .               
           30 ( 0.00%)          Graph::Graph(int V) : V(V), adj(V) {}
       46,927 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
            .           
            .                   void Graph::addEdge(int u, int v)
      869,757 ( 0.00%)              {
    1,988,016 ( 0.01%)                  if (u < 0 || u >= V || v < 0 || v >= V)
            .                           {
            .                               std::cerr << "Error: Vertex out of bounds (addEdge)" << std::endl;
            .                               return;
            .                           }
      497,004 ( 0.00%)                  if (u == v)
            .                           {
            .                               std::cerr << "Error: No self-loops allowed (addEdge)" << std::endl;
            .                               return;
            .                           }
            .           
      994,008 ( 0.00%)                  if(isEdgeConnected(u, v))
2,243,712,180 ( 6.40%)  => Graph.cpp:Graph::isEdgeConnected(int, int) const (124,251x)
            .                           {
            .                               std::cerr << "Error: Edge already exists (addEdge)" << std::endl;
            .                               return;
            .                           }
            .           
    1,491,012 ( 0.00%)                  adj[u].push_back(v);
   11,759,445 ( 0.03%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (124,251x)
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
    1,491,012 ( 0.00%)                  adj[v].push_back(u); // For undirected graph
   11,991,856 ( 0.03%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (124,251x)
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
      248,502 ( 0.00%)              }
            .           
            .                   const std::vector<int>& Graph::getNeighbors(int v) const
        5,988 ( 0.00%)              {
        5,988 ( 0.00%)                  if(v < 0 || v >= V)
            .                           {
            .                               std::cerr << "Error: Vertex out of bounds (getNeighbros)" << std::endl;
            .                               static const std::vector<int> empty; // Return an empty vector on error
            .                               return empty;
            .                           }
        6,986 ( 0.00%)                  return adj[v];
       14,970 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (998x)
        1,996 ( 0.00%)              }
            .           
            .                   int Graph::getNumVertices() const
            .                       {
            .                           return V;
            .                       }
            .           
            .                   bool Graph::isEdgeConnected(int u, int v) const
   16,645,730 ( 0.05%)              {
   19,974,876 ( 0.06%)                  if (u < 0 || u >= V || v < 0 || v >= V)
            .                           {
            .                               std::cerr << "Error: Vertex out of bounds (isConnected)" << std::endl;
            .                               return false;
            .                           }
            .           
6,016,911,412 (17.17%)                  for (int neighbor : adj[u])
13,588,326,440 (38.78%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (399,656,660x)
4,775,905,044 (13.63%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (397,992,087x)
3,195,265,264 ( 9.12%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (399,408,158x)
   53,266,336 ( 0.15%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (1,664,573x)
   51,601,763 ( 0.15%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (1,664,573x)
   24,968,595 ( 0.07%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (1,664,573x)
            .                           {
1,198,224,474 ( 3.42%)                      if (neighbor == v)
    2,832,142 ( 0.01%)                          return true;
            .                           }
      248,502 ( 0.00%)                  return false;
    8,322,865 ( 0.02%)              }
            .                   
            .                   void Graph::printGraph() const
            8 ( 0.00%)              {
        2,501 ( 0.00%)                  for (int i = 0; i < V; ++i)
            .                           {
        7,485 ( 0.00%)                      std::cout << "Vertex " << i << ":";
      219,948 ( 0.00%)  => ???:0x000000000010a4d0 (499x)
      291,915 ( 0.00%)  => ???:0x000000000010a3f0 (998x)
    3,739,506 ( 0.01%)                      for (int neighbor : adj[i])
    8,466,034 ( 0.02%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (249,001x)
    2,982,024 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (248,502x)
    1,988,016 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (248,502x)
       15,968 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (499x)
       15,469 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (499x)
        7,485 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (499x)
            .                               {
    2,485,020 ( 0.01%)                          std::cout << " " << neighbor;
  109,637,181 ( 0.31%)  => ???:0x000000000010a4d0 (248,502x)
   69,112,902 ( 0.20%)  => ???:0x000000000010a3f0 (248,502x)
            .                               }
        2,495 ( 0.00%)                      std::cout << std::endl;
      216,566 ( 0.00%)  => ???:0x000000000010a420 (499x)
            .                           }
            6 ( 0.00%)              }
            .                   
            .                   int Graph::degree(int v) const
       11,994 ( 0.00%)          {
       11,994 ( 0.00%)              if (v < 0 || v >= V)
            .                       {
            .                           std::cerr << "Error: Vertex out of bounds (degree)" << std::endl;
            .                           return -1;
            .                       }
       17,991 ( 0.00%)              return adj[v].size();
       29,985 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) const (1,999x)
       25,987 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (1,999x)
        3,998 ( 0.00%)          }
            .                   
            .                   bool Graph::isEulerian() const
           18 ( 0.00%)          {
        5,006 ( 0.00%)              for (int i = 0; i < V; ++i)
            .                       {
        9,980 ( 0.00%)                  if (degree(i) % 2 != 0){ // If any vertex has an odd degree
       50,898 ( 0.00%)  => Graph.cpp:Graph::degree(int) const (998x)
            .                               std::cout << "Vertex " << i << " has odd degree of " << degree(i) << std::endl;
            .                               return false;
            .                               }
            .                       }
            .           
           18 ( 0.00%)              std::vector<bool> visited(V, false);
        1,142 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::vector(unsigned long, bool const&, std::allocator<bool> const&) (2x)
            .           
            .                       // Find a vertex with a non-zero degree to start DFS
            .                       int start_node;
           12 ( 0.00%)              for (start_node = 0; start_node < V; ++start_node) {
           18 ( 0.00%)                  if (degree(start_node) > 0) {
          102 ( 0.00%)  => Graph.cpp:Graph::degree(int) const (2x)
            2 ( 0.00%)                      break;
            .                           }
            .                       }
            .           
            8 ( 0.00%)              if (start_node == V) {
            .                           // The graph has no edges, it's connected trivially
            .                           std::cout << "The graph has no edges." << std::endl;
            .                           return true; 
            .                       }
            .           
            .                       // Run DFS from the first non-isolated vertex
           12 ( 0.00%)              DFS(start_node, visited, *this);
  170,161,200 ( 0.49%)  => Graph.cpp:DFS(int, std::vector<bool, std::allocator<bool> >&, Graph const&) (2x)
            .           
            .                       // Check if all non-isolated vertices were visited
        5,002 ( 0.00%)              for (int i = 0; i < V; ++i) {
       23,952 ( 0.00%)                  if (degree(i) > 0 && !visited[i]) {
      242,514 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (998x)
       50,898 ( 0.00%)  => Graph.cpp:Graph::degree(int) const (998x)
       13,972 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (998x)
            .                               std::cout << "Vertex " << i << " is not connected." << std::endl;
            .                               return false; // Found an unvisited non-isolated vertex
            .                           }
            .                       }
            .           
            2 ( 0.00%)              return true;
           20 ( 0.00%)          }
          656 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::~vector() (2x)
            .           
            9 ( 0.00%)          void Graph::findEulerCircuit(){
            .                       
            6 ( 0.00%)              if (!Graph::isEulerian()) {
   85,282,729 ( 0.24%)  => Graph.cpp:Graph::isEulerian() const (1x)
            .                           std::cout << "The graph is not Eulerian." << std::endl;
            .                           return;
            .                       }
            .           
            6 ( 0.00%)              std::vector<std::vector<int>> tempAdj = adj; // Create a copy of the adjacency list
      627,028 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::vector(std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > const&) (1x)
            3 ( 0.00%)              std::vector<int> circuit; // To store the Eulerian circuit
           52 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (1x)
            3 ( 0.00%)              std::vector<int> stack; // Stack to hold the current path
           52 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::vector() (1x)
            .           
            .                       // Start from the first vertex with edges
            1 ( 0.00%)              int currVertex = 0;
            6 ( 0.00%)              for (int i = 0; i < V; ++i) {
            9 ( 0.00%)                  if (degree(i) > 0) {
           51 ( 0.00%)  => Graph.cpp:Graph::degree(int) const (1x)
            2 ( 0.00%)                      currVertex = i;
            1 ( 0.00%)                      break;
            .                           }
            .                       }
            .           
            5 ( 0.00%)              stack.push_back(currVertex);
          863 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (1x)
            .           
    1,491,025 ( 0.00%)              while (!stack.empty()) {
   30,565,992 ( 0.09%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::empty() const (248,504x)
    2,485,030 ( 0.01%)                  if (tempAdj[currVertex].empty()) {
   30,565,869 ( 0.09%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::empty() const (248,503x)
    3,727,545 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (248,503x)
            .                               // If no more neighbors, add to circuit
      621,260 ( 0.00%)                      circuit.push_back(currVertex);
    9,064,851 ( 0.03%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (124,252x)
      621,260 ( 0.00%)                      currVertex = stack.back();
   12,922,208 ( 0.04%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::back() (124,252x)
      497,008 ( 0.00%)                      stack.pop_back();
    2,857,796 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::pop_back() (124,252x)
            .                           } else {
            .                               // Otherwise, continue traversing
      621,255 ( 0.00%)                      stack.push_back(currVertex);
    9,063,453 ( 0.03%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::push_back(int const&) (124,251x)
    1,242,510 ( 0.00%)                      int nextVertex = tempAdj[currVertex].back();
   12,922,104 ( 0.04%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::back() (124,251x)
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
            .                               // Remove the edge from the graph
      994,008 ( 0.00%)                      tempAdj[currVertex].pop_back();
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
    2,857,773 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::pop_back() (124,251x)
    2,982,024 ( 0.01%)                      auto it = std::find(tempAdj[nextVertex].begin(), tempAdj[nextVertex].end(), currVertex);
1,492,535,403 ( 4.26%)  => /usr/include/c++/13/bits/stl_algo.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > std::find<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (124,251x)
    3,727,530 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (248,502x)
    3,976,032 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (124,251x)
    3,851,781 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (124,251x)
    1,988,016 ( 0.01%)                      if (it != tempAdj[nextVertex].end()) {
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
    3,976,032 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (124,251x)
    4,224,534 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (124,251x)
    1,988,016 ( 0.01%)                          tempAdj[nextVertex].erase(it);
   63,280,779 ( 0.18%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::erase(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) (124,251x)
    1,863,765 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::operator[](unsigned long) (124,251x)
    2,733,522 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator<int*, void>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (124,251x)
            .                               }
      248,502 ( 0.00%)                      currVertex = nextVertex;
            .                           }
            .                       }
            .           
            .                       // Print the Eulerian circuit
            5 ( 0.00%)              std::cout << "Eulerian Circuit: ";
          378 ( 0.00%)  => ???:0x000000000010a3f0 (1x)
    1,863,798 ( 0.01%)              for (auto it = circuit.rbegin(); it != circuit.rend(); ++it) {
   11,307,023 ( 0.03%)  => /usr/include/c++/13/bits/stl_iterator.h:bool std::operator!=<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&) (124,253x)
    7,330,927 ( 0.02%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::rend() (124,253x)
    2,857,796 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::operator++() (124,252x)
           60 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::rbegin() (1x)
    1,615,276 ( 0.00%)                  std::cout << *it << " ";
   54,860,309 ( 0.16%)  => ???:0x000000000010a4d0 (124,252x)
   34,570,088 ( 0.10%)  => ???:0x000000000010a3f0 (124,252x)
    5,094,332 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::operator*() const (124,252x)
            .                       }
            5 ( 0.00%)              std::cout << std::endl;
          434 ( 0.00%)  => ???:0x000000000010a420 (1x)
           16 ( 0.00%)          }
      195,628 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::~vector() (1x)
          448 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::~vector() (2x)
            .           
            .           
            .           // Depth-First Search (DFS) helper function (not a member of Graph class)
        9,980 ( 0.00%)  void DFS(int start_node, std::vector<bool>& visited, const Graph& graph) {
            .               // Mark the current node as visited
       11,976 ( 0.00%)      visited[start_node] = true;
          486 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (2x)
           42 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator=(bool) (2x)
        9,980 ( 0.00%)      std::cout << start_node << " "; // Print the node
          816 ( 0.00%)  => ???:0x000000000010a4d0 (2x)
          556 ( 0.00%)  => ???:0x000000000010a3f0 (2x)
            .           
            .               // Iterate through all neighbors of the current node
    7,477,016 ( 0.02%)      for (int neighbor : graph.getNeighbors(start_node)) {
       33,932 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator!=<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (998x)
       11,952 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator++() (996x)
        7,968 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::operator*() const (996x)
           72 ( 0.00%)  => Graph.cpp:Graph::getNeighbors(int) const (2x)
           64 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (2x)
           62 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (2x)
            .                   //  Recursively call DFS for unvisited neighbors
    6,958,056 ( 0.02%)          if (!visited[neighbor]) {
      242,028 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::vector<bool, std::allocator<bool> >::operator[](unsigned long) (996x)
       13,944 ( 0.00%)  => /usr/include/c++/13/bits/stl_bvector.h:std::_Bit_reference::operator bool() const (996x)
        5,976 ( 0.00%)              DFS(neighbor, visited, graph);
  169,820,262 ( 0.48%)  => Graph.cpp:DFS(int, std::vector<bool, std::allocator<bool> >&, Graph const&)'2 (2x)
            .                   }
            .               }
        5,988 ( 0.00%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           
         .                 struct _Vector_impl_data
         .                 {
         .           	pointer _M_start;
         .           	pointer _M_finish;
         .           	pointer _M_end_of_storage;
         .           
         .           	_GLIBCXX20_CONSTEXPR
     4,008 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
     6,012 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
     3,006 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
         .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
         .           	  _M_end_of_storage(__x._M_end_of_storage)
         .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
         .           #endif
-- line 109 ----------------------------------------
-- line 125 ----------------------------------------
         .           	  // information used by TBAA.
         .           	  _Vector_impl_data __tmp;
         .           	  __tmp._M_copy_data(*this);
         .           	  _M_copy_data(__x);
         .           	  __x._M_copy_data(__tmp);
         .           	}
         .                 };
         .           
    10,020 ( 0.00%)        struct _Vector_impl
         .           	: public _Tp_alloc_type, public _Vector_impl_data
         .                 {
         .           	_GLIBCXX20_CONSTEXPR
     4,509 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
         .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
         .           #if __cpp_lib_concepts
         .           	requires is_default_constructible_v<_Tp_alloc_type>
         .           #endif
     1,503 ( 0.00%)  	: _Tp_alloc_type()
     6,513 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl_data::_Vector_impl_data() (501x)
     1,503 ( 0.00%)  	{ }
         .           
         .           	_GLIBCXX20_CONSTEXPR
     7,014 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
     1,503 ( 0.00%)  	: _Tp_alloc_type(__a)
        26 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_impl_data::_Vector_impl_data() (2x)
     1,503 ( 0.00%)  	{ }
         .           
         .           #if __cplusplus >= 201103L
         .           	// Not defaulted, to enforce noexcept(true) even when
         .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
         .           	_GLIBCXX20_CONSTEXPR
         .           	_Vector_impl(_Vector_impl&& __x) noexcept
         .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
         .           	{ }
-- line 156 ----------------------------------------
-- line 293 ----------------------------------------
         .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
         .                 };
         .           
         .               public:
         .                 typedef _Alloc allocator_type;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Tp_alloc_type&
    46,220 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    34,665 ( 0.00%)        { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 const _Tp_alloc_type&
    42,208 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
    31,656 ( 0.00%)        { return this->_M_impl; }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 allocator_type
         .                 get_allocator() const _GLIBCXX_NOEXCEPT
         .                 { return allocator_type(_M_get_Tp_allocator()); }
         .           
         .           #if __cplusplus >= 201103L
     5,511 ( 0.00%)        _Vector_base() = default;
    15,030 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() (501x)
         .           #else
         .                 _Vector_base() { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
         .                 : _M_impl(__a) { }
         .           
-- line 323 ----------------------------------------
-- line 325 ----------------------------------------
         .           #if !_GLIBCXX_INLINE_VERSION
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(size_t __n)
         .                 : _M_impl()
         .                 { _M_create_storage(__n); }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
     4,008 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
     2,505 ( 0.00%)        : _M_impl(__a)
    17,465 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&) (499x)
     4,509 ( 0.00%)        { _M_create_storage(__n); }
   134,316 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (499x)
         .           
         .           #if __cplusplus >= 201103L
         .                 _Vector_base(_Vector_base&&) = default;
         .           
         .                 // Kept for ABI compatibility.
         .           # if !_GLIBCXX_INLINE_VERSION
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
-- line 343 ----------------------------------------
-- line 359 ----------------------------------------
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
         .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
         .                 { }
         .           #endif
         .           
         .                 _GLIBCXX20_CONSTEXPR
     5,010 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
         .                 {
     7,014 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
   257,376 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long) (1,000x)
     7,016 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
     6,012 ( 0.00%)        }
    21,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl() (1,000x)
         .           
         .               public:
         .                 _Vector_impl _M_impl;
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 pointer
    33,162 ( 0.00%)        _M_allocate(size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
    33,162 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    11,054 ( 0.00%)        }
         .           
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
    42,196 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
         .                 {
         .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
    12,056 ( 0.00%)  	if (__p)
    33,162 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
    18,084 ( 0.00%)        }
         .           
         .               protected:
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
     3,006 ( 0.00%)        _M_create_storage(size_t __n)
         .                 {
     3,507 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
       646 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_allocate(unsigned long) (2x)
     2,004 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
     3,513 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
     1,503 ( 0.00%)        }
         .               };
         .           
         .             /**
         .              *  @brief A standard container which offers fixed time access to
         .              *  individual elements in any order.
         .              *
         .              *  @ingroup sequences
         .              *  @headerfile vector
-- line 409 ----------------------------------------
-- line 496 ----------------------------------------
         .                 }
         .           
         .                 static pointer
         .                 _S_do_relocate(pointer, pointer, pointer __result,
         .           		     _Tp_alloc_type&, false_type) noexcept
         .                 { return __result; }
         .           
         .                 static _GLIBCXX20_CONSTEXPR pointer
    80,416 ( 0.00%)        _S_relocate(pointer __first, pointer __last, pointer __result,
         .           		  _Tp_alloc_type& __alloc) noexcept
         .                 {
         .           #if __cpp_if_constexpr
         .           	// All callers have already checked _S_use_relocate() so just do it.
    60,312 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
 1,224,103 ( 0.00%)  => /usr/include/c++/13/bits/stl_uninitialized.h:int* std::__relocate_a<int*, int*, std::allocator<int> >(int*, int*, int*, std::allocator<int>&) (10,052x)
         .           #else
         .           	using __do_it = __bool_constant<_S_use_relocate()>;
         .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
         .           #endif
    20,104 ( 0.00%)        }
         .           #endif // C++11
         .           
         .               protected:
         .                 using _Base::_M_allocate;
         .                 using _Base::_M_deallocate;
         .                 using _Base::_M_impl;
         .                 using _Base::_M_get_Tp_allocator;
         .           
-- line 522 ----------------------------------------
-- line 523 ----------------------------------------
         .               public:
         .                 // [23.2.4.1] construct/copy/destroy
         .                 // (assign() and get_allocator() are also listed in this section)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  */
         .           #if __cplusplus >= 201103L
     5,511 ( 0.00%)        vector() = default;
    20,541 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_Vector_base() (501x)
         .           #else
         .                 vector() { }
         .           #endif
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with no elements.
         .                  *  @param  __a  An allocator object.
         .                  */
-- line 539 ----------------------------------------
-- line 548 ----------------------------------------
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n default
         .                  *  constructed elements.
         .                  */
         .                 explicit
         .                 _GLIBCXX20_CONSTEXPR
         8 ( 0.00%)        vector(size_type __n, const allocator_type& __a = allocator_type())
        12 ( 0.00%)        : _Base(_S_check_init_len(__n, __a), __a)
       333 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
        88 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_check_init_len(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
         9 ( 0.00%)        { _M_default_initialize(__n); }
    46,477 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_default_initialize(unsigned long) (1x)
         .           
         .                 /**
         .                  *  @brief  Creates a %vector with copies of an exemplar element.
         .                  *  @param  __n  The number of elements to initially create.
         .                  *  @param  __value  An element to copy.
         .                  *  @param  __a  An allocator.
         .                  *
         .                  *  This constructor fills the %vector with @a __n copies of @a __value.
-- line 566 ----------------------------------------
-- line 593 ----------------------------------------
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x  will not be copied
         .                  *  (i.e. capacity() == size() in the new %vector).
         .                  *
         .                  *  The newly-created %vector uses a copy of the allocator object used
         .                  *  by @a __x (unless the allocator traits dictate a different object).
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
     6,000 ( 0.00%)        vector(const vector& __x)
         .                 : _Base(__x.size(),
    12,000 ( 0.00%)  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
       487 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_Vector_base(unsigned long, std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
        14 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::size() const (1x)
         7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator() const (1x)
         .                 {
     1,000 ( 0.00%)  	this->_M_impl._M_finish =
     7,000 ( 0.00%)  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
   626,369 ( 0.00%)  => /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<int, std::allocator<int> >* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, __gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >, std::vector<int, std::allocator<int> >*, std::allocator<std::vector<int, std::allocator<int> > >&) (1x)
        32 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::end() const (1x)
        31 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::begin() const (1x)
         .           				      this->_M_impl._M_start,
     2,000 ( 0.00%)  				      _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator() (1x)
     5,000 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  %Vector move constructor.
         .                  *
         .                  *  The newly-created %vector contains the exact contents of the
         .                  *  moved instance.
         .                  *  The contents of the moved instance are a valid, but unspecified
-- line 617 ----------------------------------------
-- line 725 ----------------------------------------
         .           
         .                 /**
         .                  *  The dtor only erases the elements, and note that if the
         .                  *  elements themselves are pointers, the pointed-to memory is
         .                  *  not touched in any way.  Managing the pointer is the user's
         .                  *  responsibility.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
     5,010 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
         .                 {
     7,014 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     3,006 ( 0.00%)  		      _M_get_Tp_allocator());
     7,000 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() (1,000x)
         .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
     6,012 ( 0.00%)        }
   303,376 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::~_Vector_base() (1,000x)
         .           
         .                 /**
         .                  *  @brief  %Vector assignment operator.
         .                  *  @param  __x  A %vector of identical element and allocator types.
         .                  *
         .                  *  All the elements of @a __x are copied, but any unused capacity in
         .                  *  @a __x will not be copied.
         .                  *
-- line 746 ----------------------------------------
-- line 865 ----------------------------------------
         .                 // iterators
         .                 /**
         .                  *  Returns a read/write iterator that points to the first
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
 3,022,248 ( 0.01%)        begin() _GLIBCXX_NOEXCEPT
 4,155,591 ( 0.01%)        { return iterator(this->_M_impl._M_start); }
 4,533,372 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (377,781x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points to the
         .                  *  first element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
17,308,616 ( 0.05%)        begin() const _GLIBCXX_NOEXCEPT
23,799,347 ( 0.07%)        { return const_iterator(this->_M_impl._M_start); }
        12 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&) (1x)
         .           
         .                 /**
         .                  *  Returns a read/write iterator that points one past the last
         .                  *  element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 iterator
 5,506,624 ( 0.02%)        end() _GLIBCXX_NOEXCEPT
 8,259,936 ( 0.02%)        { return iterator(this->_M_impl._M_finish); }
 8,259,936 ( 0.02%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (688,328x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past
         .                  *  the last element in the %vector.  Iteration is done in
         .                  *  ordinary element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_iterator
17,308,616 ( 0.05%)        end() const _GLIBCXX_NOEXCEPT
25,962,924 ( 0.07%)        { return const_iterator(this->_M_impl._M_finish); }
        12 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<std::vector<int, std::allocator<int> > const*, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > >::__normal_iterator(std::vector<int, std::allocator<int> > const* const&) (1x)
         .           
         .                 /**
         .                  *  Returns a read/write reverse iterator that points to the
         .                  *  last element in the %vector.  Iteration is done in reverse
         .                  *  element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reverse_iterator
         6 ( 0.00%)        rbegin() _GLIBCXX_NOEXCEPT
        11 ( 0.00%)        { return reverse_iterator(end()); }
        32 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (1x)
        11 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (1x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reverse iterator that points
         .                  *  to the last element in the %vector.  Iteration is done in
         .                  *  reverse element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
-- line 922 ----------------------------------------
-- line 925 ----------------------------------------
         .           
         .                 /**
         .                  *  Returns a read/write reverse iterator that points to one
         .                  *  before the first element in the %vector.  Iteration is done
         .                  *  in reverse element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reverse_iterator
   745,518 ( 0.00%)        rend() _GLIBCXX_NOEXCEPT
 1,366,783 ( 0.00%)        { return reverse_iterator(begin()); }
 3,851,843 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (124,253x)
 1,366,783 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::reverse_iterator(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (124,253x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reverse iterator that points
         .                  *  to one before the first element in the %vector.  Iteration
         .                  *  is done in reverse element order.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reverse_iterator
-- line 942 ----------------------------------------
-- line 946 ----------------------------------------
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points to the
         .                  *  first element in the %vector.  Iteration is done in ordinary
         .                  *  element order.
         .                  */
         .                 [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
         .                 const_iterator
   994,008 ( 0.00%)        cbegin() const noexcept
 1,366,761 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
 1,491,012 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::__normal_iterator(int const* const&) (124,251x)
         .           
         .                 /**
         .                  *  Returns a read-only (constant) iterator that points one past
         .                  *  the last element in the %vector.  Iteration is done in
         .                  *  ordinary element order.
         .                  */
         .                 [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
         .                 const_iterator
-- line 963 ----------------------------------------
-- line 984 ----------------------------------------
         .                 crend() const noexcept
         .                 { return const_reverse_iterator(begin()); }
         .           #endif
         .           
         .                 // [23.2.4.2] capacity
         .                 /**  Returns the number of elements in the %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
    90,412 ( 0.00%)        size() const _GLIBCXX_NOEXCEPT
   203,428 ( 0.00%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
         .           
         .                 /**  Returns the size() of the largest possible %vector.  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 size_type
    50,260 ( 0.00%)        max_size() const _GLIBCXX_NOEXCEPT
    70,364 ( 0.00%)        { return _S_max_size(_M_get_Tp_allocator()); }
   452,340 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::_S_max_size(std::allocator<int> const&) (10,052x)
    70,364 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator() const (10,052x)
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Resizes the %vector to the specified number of elements.
         .                  *  @param  __new_size  Number of elements the %vector should contain.
         .                  *
         .                  *  This function will %resize the %vector to the specified
         .                  *  number of elements.  If the number is smaller than the
-- line 1007 ----------------------------------------
-- line 1080 ----------------------------------------
         .           			 - this->_M_impl._M_start); }
         .           
         .                 /**
         .                  *  Returns true if the %vector is empty.  (Thus begin() would
         .                  *  equal end().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 bool
 3,976,056 ( 0.01%)        empty() const _GLIBCXX_NOEXCEPT
 8,946,126 ( 0.03%)        { return begin() == end(); }
16,898,238 ( 0.05%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator==<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (497,007x)
15,904,224 ( 0.05%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() const (497,007x)
15,407,217 ( 0.04%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() const (497,007x)
         .           
         .                 /**
         .                  *  @brief  Attempt to preallocate enough memory for specified number of
         .                  *          elements.
         .                  *  @param  __n  Number of elements required.
         .                  *  @throw  std::length_error  If @a n exceeds @c max_size().
         .                  *
         .                  *  This function attempts to reserve enough memory for the
-- line 1097 ----------------------------------------
-- line 1118 ----------------------------------------
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
         .                  *  Note that data access with this operator is unchecked and
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
 6,212,555 ( 0.02%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
 9,940,088 ( 0.03%)  	return *(this->_M_impl._M_start + __n);
 2,485,022 ( 0.01%)        }
         .           
         .                 /**
         .                  *  @brief  Subscript access to the data contained in the %vector.
         .                  *  @param __n The index of the element for which data should be
         .                  *  accessed.
         .                  *  @return  Read-only (constant) reference to data.
         .                  *
         .                  *  This operator allows for easy, array-style, data access.
         .                  *  Note that data access with this operator is unchecked and
         .                  *  out_of_range lookups are not defined. (For checked lookups
         .                  *  see at().)
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reference
 8,340,345 ( 0.02%)        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_subscript(__n);
13,344,552 ( 0.04%)  	return *(this->_M_impl._M_start + __n);
 3,336,138 ( 0.01%)        }
         .           
         .               protected:
         .                 /// Safety check used only from at().
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_range_check(size_type __n) const
         .                 {
         .           	if (__n >= this->size())
-- line 1157 ----------------------------------------
-- line 1225 ----------------------------------------
         .                 }
         .           
         .                 /**
         .                  *  Returns a read/write reference to the data at the last
         .                  *  element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 reference
 1,988,024 ( 0.01%)        back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
 2,982,036 ( 0.01%)  	return *(end() - 1);
 9,691,617 ( 0.03%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator-(long) const (248,503x)
 7,952,096 ( 0.02%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (248,503x)
 1,988,024 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (248,503x)
 1,242,515 ( 0.00%)        }
         .           
         .                 /**
         .                  *  Returns a read-only (constant) reference to the data at the
         .                  *  last element of the %vector.
         .                  */
         .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
         .                 const_reference
         .                 back() const _GLIBCXX_NOEXCEPT
-- line 1245 ----------------------------------------
-- line 1273 ----------------------------------------
         .                  *  This is a typical stack operation.  The function creates an
         .                  *  element at the end of the %vector and assigns the given data
         .                  *  to it.  Due to the nature of a %vector this operation can be
         .                  *  done in constant time if the %vector has preallocated space
         .                  *  available.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
 3,479,042 ( 0.01%)        push_back(const value_type& __x)
         .                 {
 2,982,036 ( 0.01%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
         .           	  {
         .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 3,443,860 ( 0.01%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         .           				     __x);
 2,459,900 ( 0.01%)  	    ++this->_M_impl._M_finish;
         .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
         .           	  }
         .           	else
    45,234 ( 0.00%)  	  _M_realloc_insert(end(), __x);
 6,166,400 ( 0.02%)  => /usr/include/c++/13/bits/vector.tcc:void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&) (5,026x)
   160,832 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::end() (5,026x)
 2,480,004 ( 0.01%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 push_back(value_type&& __x)
         .                 { emplace_back(std::move(__x)); }
         .           
         .                 template<typename... _Args>
-- line 1301 ----------------------------------------
-- line 1314 ----------------------------------------
         .                  *  This is a typical stack operation. It shrinks the %vector by one.
         .                  *
         .                  *  Note that no data is returned, and if the last element's
         .                  *  data is needed, it should be retrieved before pop_back() is
         .                  *  called.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
   994,012 ( 0.00%)        pop_back() _GLIBCXX_NOEXCEPT
         .                 {
         .           	__glibcxx_requires_nonempty();
 1,242,515 ( 0.00%)  	--this->_M_impl._M_finish;
 2,236,527 ( 0.01%)  	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
         .           	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
   745,509 ( 0.00%)        }
         .           
         .           #if __cplusplus >= 201103L
         .                 /**
         .                  *  @brief  Inserts an object in %vector before specified iterator.
         .                  *  @param  __position  A const_iterator into the %vector.
         .                  *  @param  __args  Arguments.
         .                  *  @return  An iterator that points to the inserted data.
         .                  *
-- line 1336 ----------------------------------------
-- line 1526 ----------------------------------------
         .                  *  The user is also cautioned that this function only erases
         .                  *  the element, and that if the element is itself a pointer,
         .                  *  the pointed-to memory is not touched in any way.  Managing
         .                  *  the pointer is the user's responsibility.
         .                  */
         .                 _GLIBCXX20_CONSTEXPR
         .                 iterator
         .           #if __cplusplus >= 201103L
 1,242,510 ( 0.00%)        erase(const_iterator __position)
 3,603,279 ( 0.01%)        { return _M_erase(begin() + (__position - cbegin())); }
41,536,854 ( 0.12%)  => /usr/include/c++/13/bits/vector.tcc:std::vector<int, std::allocator<int> >::_M_erase(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >) (124,251x)
 4,721,538 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator+(long) const (124,251x)
 4,473,036 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::difference_type __gnu_cxx::operator-<int const*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > const&) (124,251x)
 3,851,781 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::begin() (124,251x)
 3,851,781 ( 0.01%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::cbegin() const (124,251x)
         .           #else
         .                 erase(iterator __position)
         .                 { return _M_erase(__position); }
         .           #endif
         .           
         .                 /**
         .                  *  @brief  Remove a range of elements.
         .                  *  @param  __first  Iterator pointing to the first element to be erased.
-- line 1543 ----------------------------------------
-- line 1707 ----------------------------------------
         .           	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
         .           					_M_get_Tp_allocator());
         .                 }
         .           
         .           #if __cplusplus >= 201103L
         .                 // Called by the vector(n) constructor.
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         6 ( 0.00%)        _M_default_initialize(size_type __n)
         .                 {
         2 ( 0.00%)  	this->_M_impl._M_finish =
         6 ( 0.00%)  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    46,449 ( 0.00%)  => /usr/include/c++/13/bits/stl_uninitialized.h:std::vector<int, std::allocator<int> >* std::__uninitialized_default_n_a<std::vector<int, std::allocator<int> >*, unsigned long, std::vector<int, std::allocator<int> > >(std::vector<int, std::allocator<int> >*, unsigned long, std::allocator<std::vector<int, std::allocator<int> > >&) (1x)
         4 ( 0.00%)  					   _M_get_Tp_allocator());
         7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_M_get_Tp_allocator() (1x)
         3 ( 0.00%)        }
         .           #endif
         .           
         .                 // Internal assign functions follow.  The *_aux functions do the actual
         .                 // assignment work for the range versions.
         .           
         .                 // Called by the range assign to implement [23.1.1]/9
         .           
         .                 // _GLIBCXX_RESOLVE_LIB_DEFECTS
-- line 1728 ----------------------------------------
-- line 1888 ----------------------------------------
         .                 iterator
         .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
         .                 { return _M_insert_rval(__position, std::move(__v)); }
         .           #endif
         .           
         .                 // Called by _M_fill_insert, _M_insert_aux etc.
         .                 _GLIBCXX20_CONSTEXPR
         .                 size_type
    55,286 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
         .                 {
    70,364 ( 0.00%)  	if (max_size() - size() < __n)
   321,664 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (5,026x)
    65,338 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (5,026x)
         .           	  __throw_length_error(__N(__s));
         .           
    80,416 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
   130,676 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (10,052x)
    70,865 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (5,026x)
    55,286 ( 0.00%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
   321,664 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::max_size() const (5,026x)
    65,338 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<int, std::allocator<int> >::size() const (5,026x)
    30,156 ( 0.00%)        }
         .           
         .                 // Called by constructors to check initial size.
         .                 static _GLIBCXX20_CONSTEXPR size_type
        16 ( 0.00%)        _S_check_init_len(size_type __n, const allocator_type& __a)
         .                 {
         7 ( 0.00%)  	if (__n > _S_max_size(_Tp_alloc_type(__a)))
        45 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >::_S_max_size(std::allocator<std::vector<int, std::allocator<int> > > const&) (1x)
         .           	  __throw_length_error(
         .           	      __N("cannot create std::vector larger than max_size()"));
         1 ( 0.00%)  	return __n;
         6 ( 0.00%)        }
         .           
         .                 static _GLIBCXX20_CONSTEXPR size_type
    80,424 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
         .                 {
         .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
         .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
         .           	// (even if std::allocator_traits::max_size says we can).
    80,424 ( 0.00%)  	const size_t __diffmax
         .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
    10,053 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
    60,318 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
   140,728 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (10,052x)
    50,265 ( 0.00%)        }
         .           
         .                 // Internal erase functions follow.
         .           
         .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
         .                 // _M_assign_aux.
         .                 _GLIBCXX20_CONSTEXPR
         .                 void
         .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1933 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/predefined_ops.h
--------------------------------------------------------------------------------
Ir                   

-- line 254 ----------------------------------------
          .           
          .             template<typename _Value>
          .               struct _Iter_equals_val
          .               {
          .                 _Value& _M_value;
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 explicit
    621,255 ( 0.00%)        _Iter_equals_val(_Value& __value)
    372,753 ( 0.00%)  	: _M_value(__value)
    372,753 ( 0.00%)        { }
          .           
          .                 template<typename _Iterator>
          .           	_GLIBCXX20_CONSTEXPR
          .           	bool
185,630,826 ( 0.53%)  	operator()(_Iterator __it)
340,323,181 ( 0.97%)  	{ return *__it == _M_value; }
247,507,768 ( 0.71%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (30,938,471x)
          .               };
          .           
          .             template<typename _Value>
          .               _GLIBCXX20_CONSTEXPR
          .               inline _Iter_equals_val<_Value>
    994,008 ( 0.00%)      __iter_equals_val(_Value& __val)
  1,366,761 ( 0.00%)      { return _Iter_equals_val<_Value>(__val); }
  1,366,761 ( 0.00%)  => /usr/include/c++/13/bits/predefined_ops.h:__gnu_cxx::__ops::_Iter_equals_val<int const>::_Iter_equals_val(int const&) (124,251x)
          .           
          .             template<typename _Iterator1>
          .               struct _Iter_equals_iter
          .               {
          .                 _Iterator1 _M_it1;
          .           
          .                 _GLIBCXX20_CONSTEXPR
          .                 explicit
-- line 285 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_iterator.h
--------------------------------------------------------------------------------
Ir                     

-- line 187 ----------------------------------------
            .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator()))
            .                 : current()
            .                 { }
            .           
            .                 /**
            .                  *  This %iterator will move in the opposite direction that @p x does.
            .                 */
            .                 explicit _GLIBCXX17_CONSTEXPR
      621,270 ( 0.00%)        reverse_iterator(iterator_type __x)
            .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x)))
      372,762 ( 0.00%)        : current(__x)
      372,762 ( 0.00%)        { }
            .           
            .                 /**
            .                  *  The copy constructor is normal.
            .                 */
            .                 _GLIBCXX17_CONSTEXPR
            .                 reverse_iterator(const reverse_iterator& __x)
            .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
            .                 : current(__x.current)
-- line 206 ----------------------------------------
-- line 240 ----------------------------------------
            .           	}
            .           #endif
            .           
            .                 /**
            .                  *  @return  @c current, the %iterator used for underlying work.
            .                 */
            .                 _GLIBCXX_NODISCARD
            .                 _GLIBCXX17_CONSTEXPR iterator_type
      994,024 ( 0.00%)        base() const
            .                 _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))
      994,024 ( 0.00%)        { return current; }
            .           
            .                 /**
            .                  *  @return  A reference to the value at @c --current
            .                  *
            .                  *  This requires that @c --current is dereferenceable.
            .                  *
            .                  *  @warning This implementation requires that for an iterator of the
            .                  *           underlying iterator type, @c x, a reference obtained by
            .                  *           @c *x remains valid after @c x has been modified or
            .                  *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
            .                 */
            .                 _GLIBCXX_NODISCARD
            .                 _GLIBCXX17_CONSTEXPR reference
      994,016 ( 0.00%)        operator*() const
            .                 {
      372,756 ( 0.00%)  	_Iterator __tmp = current;
      621,260 ( 0.00%)  	return *--__tmp;
    1,491,024 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (124,252x)
      994,016 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator*() const (124,252x)
      621,260 ( 0.00%)        }
            .           
            .                 /**
            .                  *  @return  A pointer to the value at @c --current
            .                  *
            .                  *  This requires that @c --current is dereferenceable.
            .                 */
            .                 _GLIBCXX_NODISCARD
            .                 _GLIBCXX17_CONSTEXPR pointer
-- line 276 ----------------------------------------
-- line 288 ----------------------------------------
            .                 }
            .           
            .                 /**
            .                  *  @return  @c *this
            .                  *
            .                  *  Decrements the underlying iterator.
            .                 */
            .                 _GLIBCXX17_CONSTEXPR reverse_iterator&
      621,260 ( 0.00%)        operator++()
            .                 {
      372,756 ( 0.00%)  	--current;
    1,491,024 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::operator--() (124,252x)
      124,252 ( 0.00%)  	return *this;
      248,504 ( 0.00%)        }
            .           
            .                 /**
            .                  *  @return  The original value of @c *this
            .                  *
            .                  *  Decrements the underlying iterator.
            .                 */
            .                 _GLIBCXX17_CONSTEXPR reverse_iterator
            .                 operator++(int)
-- line 308 ----------------------------------------
-- line 440 ----------------------------------------
            .              *  Reverse iterators forward comparisons to their underlying base()
            .              *  iterators.
            .              *
            .             */
            .           #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
            .             template<typename _Iterator>
            .               _GLIBCXX_NODISCARD
            .               inline _GLIBCXX17_CONSTEXPR bool
    1,118,277 ( 0.00%)      operator==(const reverse_iterator<_Iterator>& __x,
            .           	       const reverse_iterator<_Iterator>& __y)
    2,236,554 ( 0.01%)      { return __x.base() == __y.base(); }
    4,224,602 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:bool __gnu_cxx::operator==<int*, std::vector<int, std::allocator<int> > >(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&, __gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > const&) (124,253x)
    1,988,048 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >::base() const (248,506x)
            .           
            .             template<typename _Iterator>
            .               _GLIBCXX_NODISCARD
            .               inline _GLIBCXX17_CONSTEXPR bool
            .               operator<(const reverse_iterator<_Iterator>& __x,
            .           	      const reverse_iterator<_Iterator>& __y)
            .               { return __y.base() < __x.base(); }
            .           
            .             template<typename _Iterator>
            .               _GLIBCXX_NODISCARD
            .               inline _GLIBCXX17_CONSTEXPR bool
      745,518 ( 0.00%)      operator!=(const reverse_iterator<_Iterator>& __x,
            .           	       const reverse_iterator<_Iterator>& __y)
      994,024 ( 0.00%)      { return !(__x == __y); }
    9,567,481 ( 0.03%)  => /usr/include/c++/13/bits/stl_iterator.h:bool std::operator==<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > >(std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&, std::reverse_iterator<__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > > > const&) (124,253x)
            .           
            .             template<typename _Iterator>
            .               _GLIBCXX_NODISCARD
            .               inline _GLIBCXX17_CONSTEXPR bool
            .               operator>(const reverse_iterator<_Iterator>& __x,
            .           	      const reverse_iterator<_Iterator>& __y)
            .               { return __y < __x; }
            .           
-- line 472 ----------------------------------------
-- line 1068 ----------------------------------------
            .           #if __cplusplus > 201703L && __cpp_lib_concepts
            .                 using iterator_concept = std::__detail::__iter_concept<_Iterator>;
            .           #endif
            .           
            .                 _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
            .                 : _M_current(_Iterator()) { }
            .           
            .                 explicit _GLIBCXX20_CONSTEXPR
   30,693,045 ( 0.09%)        __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   42,970,263 ( 0.12%)        : _M_current(__i) { }
            .           
            .                 // Allow iterator to const_iterator conversion
            .           #if __cplusplus >= 201103L
            .                 template<typename _Iter, typename = __convertible_from<_Iter>>
            .           	_GLIBCXX20_CONSTEXPR
      745,506 ( 0.00%)  	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
            .           	noexcept
            .           #else
            .                 // N.B. _Container::pointer is not actually in container requirements,
            .                 // but is present in std::vector and std::basic_string.
            .                 template<typename _Iter>
            .                   __normal_iterator(const __normal_iterator<_Iter,
            .           			  typename __enable_if<
            .           	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
            .           		      _Container>::__type>& __i)
            .           #endif
    1,118,259 ( 0.00%)          : _M_current(__i.base()) { }
      869,757 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (124,251x)
            .           
            .                 // Forward iterator requirements
            .                 _GLIBCXX20_CONSTEXPR
            .                 reference
1,725,861,556 ( 4.93%)        operator*() const _GLIBCXX_NOEXCEPT
1,725,861,556 ( 4.93%)        { return *_M_current; }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 pointer
            .                 operator->() const _GLIBCXX_NOEXCEPT
            .                 { return _M_current; }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator&
1,718,209,248 ( 4.90%)        operator++() _GLIBCXX_NOEXCEPT
            .                 {
2,147,761,560 ( 6.13%)  	++_M_current;
  429,552,312 ( 1.23%)  	return *this;
  859,104,624 ( 2.45%)        }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator
            .                 operator++(int) _GLIBCXX_NOEXCEPT
            .                 { return __normal_iterator(_M_current++); }
            .           
            .                 // Bidirectional iterator requirements
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator&
      994,016 ( 0.00%)        operator--() _GLIBCXX_NOEXCEPT
            .                 {
    1,242,520 ( 0.00%)  	--_M_current;
      248,504 ( 0.00%)  	return *this;
      497,008 ( 0.00%)        }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator
            .                 operator--(int) _GLIBCXX_NOEXCEPT
            .                 { return __normal_iterator(_M_current--); }
            .           
            .                 // Random access iterator requirements
            .                 _GLIBCXX20_CONSTEXPR
-- line 1135 ----------------------------------------
-- line 1139 ----------------------------------------
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator&
            .                 operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
            .                 { _M_current += __n; return *this; }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator
    3,353,328 ( 0.01%)        operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
    6,334,064 ( 0.02%)        { return __normal_iterator(_M_current + __n); }
    4,471,104 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (372,592x)
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator&
            .                 operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
            .                 { _M_current -= __n; return *this; }
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 __normal_iterator
    2,236,527 ( 0.01%)        operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
    4,473,054 ( 0.01%)        { return __normal_iterator(_M_current - __n); }
    2,982,036 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::__normal_iterator(int* const&) (248,503x)
            .           
            .                 _GLIBCXX20_CONSTEXPR
            .                 const _Iterator&
3,214,129,364 ( 9.17%)        base() const _GLIBCXX_NOEXCEPT
2,410,597,023 ( 6.88%)        { return _M_current; }
            .               };
            .           
            .             // Note: In what follows, the left- and right-hand-side iterators are
            .             // allowed to vary in types (conceptually in cv-qualification) so that
            .             // comparison between cv-qualified and non-cv-qualified iterators be
            .             // valid.  However, the greedy and unfriendly operators in std::rel_ops
            .             // will make overload resolution ambiguous (when in scope) if we don't
            .             // provide overloads whose operands are of the same type.  Can someone
-- line 1171 ----------------------------------------
-- line 1217 ----------------------------------------
            .               operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
            .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
            .               { return __lhs.base() == __rhs.base(); }
            .           
            .             template<typename _Iterator, typename _Container>
            .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
            .               inline bool
    4,348,820 ( 0.01%)      operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
            .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
    8,076,380 ( 0.02%)      { return __lhs.base() == __rhs.base(); }
    6,958,098 ( 0.02%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const (994,014x)
            .           
            .             template<typename _IteratorL, typename _IteratorR, typename _Container>
            .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
            .               inline bool
            .               operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
            .           	       const __normal_iterator<_IteratorR, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
            .               { return __lhs.base() != __rhs.base(); }
            .           
            .             template<typename _Iterator, typename _Container>
            .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
            .               inline bool
2,804,568,655 ( 8.00%)      operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
            .           	       const __normal_iterator<_Iterator, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
5,208,484,645 (14.87%)      { return __lhs.base() != __rhs.base(); }
5,605,651,282 (16.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const (800,807,326x)
            .           
            .             // Random access iterator requirements
            .             template<typename _IteratorL, typename _IteratorR, typename _Container>
            .               _GLIBCXX_NODISCARD
            .               inline bool
            .               operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
            .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
-- line 1252 ----------------------------------------
-- line 1326 ----------------------------------------
            .               operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
            .           	      const __normal_iterator<_IteratorR, _Container>& __rhs)
            .           #endif
            .               { return __lhs.base() - __rhs.base(); }
            .           
            .             template<typename _Iterator, typename _Container>
            .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
            .               inline typename __normal_iterator<_Iterator, _Container>::difference_type
    2,103,535 ( 0.01%)      operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
            .           	      const __normal_iterator<_Iterator, _Container>& __rhs)
            .               _GLIBCXX_NOEXCEPT
    4,507,575 ( 0.01%)      { return __lhs.base() - __rhs.base(); }
    2,467,556 ( 0.01%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >::base() const (352,508x)
            .           
            .             template<typename _Iterator, typename _Container>
            .               _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
            .               inline __normal_iterator<_Iterator, _Container>
            .               operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
            .           	      __n, const __normal_iterator<_Iterator, _Container>& __i)
            .               _GLIBCXX_NOEXCEPT
            .               { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
-- line 1345 ----------------------------------------
-- line 1349 ----------------------------------------
            .           
            .           namespace std _GLIBCXX_VISIBILITY(default)
            .           {
            .           _GLIBCXX_BEGIN_NAMESPACE_VERSION
            .           
            .             template<typename _Iterator, typename _Container>
            .               _GLIBCXX20_CONSTEXPR
            .               _Iterator
    1,245,890 ( 0.00%)      __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
            .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    1,495,068 ( 0.00%)      { return __it.base(); }
        6,986 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >::base() const (998x)
            .           
            .           #if __cplusplus >= 201103L
            .           
            .           #if __cplusplus <= 201703L
            .             // Need to overload __to_address because the pointer_traits primary template
            .             // will deduce element_type of __normal_iterator<T*, C> as T* rather than T.
            .             template<typename _Iterator, typename _Container>
            .               constexpr auto
-- line 1367 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: main.cpp
--------------------------------------------------------------------------------
Ir                  

         .           #include <iostream>
         .           #include "Graph.hpp"
         .           #include <random>
         .           #include <unistd.h>
         .           
         9 ( 0.00%)  Graph generateRandomGraph(int V, int E, int seed) {
         .           
         3 ( 0.00%)      srand(seed);
     6,234 ( 0.00%)  => ???:0x000000000010a3e0 (1x)
         .           
         5 ( 0.00%)      Graph g(V);
    46,970 ( 0.00%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::Graph(int) (1x)
         1 ( 0.00%)     int count = 0;
         1 ( 0.00%)      int edgesAdded = 0;
 4,630,432 ( 0.01%)      while (edgesAdded < E) {
 6,173,904 ( 0.02%)          int u = rand() % V;
91,015,297 ( 0.26%)  => ???:0x000000000010a2d0 (1,543,476x)
 6,173,904 ( 0.02%)          int v = rand() % V; //  0 to V-1
91,015,292 ( 0.26%)  => ???:0x000000000010a2d0 (1,543,476x)
         .                   
23,248,005 ( 0.07%)          if (u != v && !g.isEdgeConnected(u, v)) { // Avoid self-loops and duplicate edges
26,708,781,263 (76.23%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::isEdgeConnected(int, int) const (1,540,322x)
   745,506 ( 0.00%)              g.addEdge(u, v);
2,278,770,322 ( 6.50%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::addEdge(int, int) (124,251x)
   124,251 ( 0.00%)              edgesAdded++;
   124,251 ( 0.00%)              count++;
 1,863,765 ( 0.01%)              std::cout <<"count:"<< count << std::endl;
37,527,787 ( 0.11%)  => ???:0x000000000010a3f0 (124,251x)
59,897,520 ( 0.17%)  => ???:0x000000000010a4d0 (124,251x)
53,927,704 ( 0.15%)  => ???:0x000000000010a420 (124,251x)
         .           
         .                   } else {
41,157,525 ( 0.12%)               std::cout << "Skipping edge (" << u << ", " << v << ") to avoid self-loop or duplicate." << std::endl;
1,555,470,600 ( 4.44%)  => ???:0x000000000010a3f0 (4,257,675x)
1,251,122,319 ( 3.57%)  => ???:0x000000000010a4d0 (2,838,450x)
615,943,650 ( 1.76%)  => ???:0x000000000010a420 (1,419,225x)
         .                   }
         .           
         .           
         .               }
         1 ( 0.00%)      return g;
         4 ( 0.00%)  }
         .           
         .           
         .           /*
         .           int main() {
         .               
         .               int num_vertices =499; // Choose a number of vertices
         .               int num_edges = 124251;    // Choose a number of edges that is significantly larger than num_vertices
         .               int seed = 1;           // Start with a known seed
-- line 38 ----------------------------------------
-- line 50 ----------------------------------------
         .                   }
         .                   
         .                   seed++; // Try the next seed
         .               }
         .               return 0;
         .           } */
         .           
         .           
        10 ( 0.00%)  int main(int argc, char *argv[]) {
         .               
         .               
         .               int V;
         .               int E;
         .               int seed;
         .               int opt;
         .           
        45 ( 0.00%)      while ((opt = getopt(argc, argv, "v:e:s:")) != -1) {
     1,531 ( 0.00%)  => ???:0x000000000010a2c0 (4x)
        22 ( 0.00%)          switch (opt) {
         .                       case 'v':
        15 ( 0.00%)                  V = std::stoi(optarg);
     1,204 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
       301 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
         8 ( 0.00%)  => ???:0x000000000010a360 (1x)
         3 ( 0.00%)                  break;
         .                       case 'e':
        15 ( 0.00%)                  E = std::stoi(optarg);
       201 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
       361 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
         8 ( 0.00%)  => ???:0x000000000010a360 (1x)
         3 ( 0.00%)                  break;
         .                       case 's':
        15 ( 0.00%)                  seed = std::stoi(optarg);
       186 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<std::allocator<char> >(char const*, std::allocator<char> const&) (1x)
       261 ( 0.00%)  => /usr/include/c++/13/bits/basic_string.h:std::__cxx11::stoi(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long*, int) (1x)
         8 ( 0.00%)  => ???:0x000000000010a360 (1x)
         1 ( 0.00%)                  break;
         .                       case '?':
         .                           if (optopt == 'v' || optopt == 'e' || optopt == 's') {
         .                               std::cerr << "Option -" << static_cast<char>(optopt) << " requires an argument." << std::endl;
         .                           } else {
         .                               std::cerr << "Unknown option `-" << static_cast<char>(optopt) << "`." << std::endl;
         .                           }
         .                           return 1;
         .                       default:
         .                           abort(); // Stop the program on unexpected errors
         .                   }
         .               }
         .           
         9 ( 0.00%)      if (E > V * (V - 1) / 2) {
         .                   std::cerr << "Error: Too many edges for the number of vertices." << std::endl;
         .                   return 1;
         .               }
         .           
         9 ( 0.00%)      Graph g = generateRandomGraph(V, E, seed);
32,827,766,525 (93.70%)  => main.cpp:generateRandomGraph(int, int, int) (1x)
   190,940 ( 0.00%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.hpp:Graph::~Graph() (1x)
         3 ( 0.00%)      g.printGraph();
199,190,529 ( 0.57%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::printGraph() const (1x)
         .           
         5 ( 0.00%)      if (g.isEulerian()) {
85,282,729 ( 0.24%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::isEulerian() const (1x)
         9 ( 0.00%)          std::cout << "The graph is Eulerian." << std::endl;
       434 ( 0.00%)  => ???:0x000000000010a420 (1x)
       398 ( 0.00%)  => ???:0x000000000010a3f0 (1x)
         4 ( 0.00%)          g.findEulerCircuit();
1,921,695,527 ( 5.48%)  => /home/yaelgildorani/Op_systems/Ex4/4/Graph.cpp:Graph::findEulerCircuit() (1x)
         .               } else {
         .                   std::cout << "The graph is not Eulerian." << std::endl;
         .               }
         .           
         1 ( 0.00%)      return 0;
         7 ( 0.00%)  }
--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./io/../sysdeps/unix/sysv/linux/write.c
  ./libio/./libio/fileops.c
  ./libio/./libio/genops.c
  ./libio/./libio/iofflush.c
  ./libio/./libio/iofwrite.c
  ./libio/./libio/libioP.h
  ./libio/./libio/putc.c
  ./stdlib/./stdlib/rand.c
  ./stdlib/./stdlib/random.c
  ./stdlib/./stdlib/random_r.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-sse2.S

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
30,971,964,435 (88.40%)  events annotated

